GaudiAiApplication.java
------------------------
package com.gaudi.ai;


import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.reactive.function.client.WebClient;


import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeIn;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.security.SecurityScheme;

@SpringBootApplication
@SecurityScheme(name = "gaudi-ai-api", scheme = "bearer", type = SecuritySchemeType.HTTP, in = SecuritySchemeIn.HEADER)
@OpenAPIDefinition(info = @Info(title = "GAUDI-AI API", version = "1.0", description = "GAUDI-AI project for SEM. Main purpose of this project is to implement GAN and Blending."))

public class GaudiAiApplication {


	@Bean
	WebClient webclient() {
		return WebClient.builder().build();
	}
	
	public static void main(String[] args) {
		SpringApplication.run(GaudiAiApplication.class, args);
	}
	  
}
=======================================
Configuration
------------------
ApplicationConfig.java
----------------------
package com.gaudi.ai.configuration;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfig {
    @Bean
    public ObjectMapper getMapper() {
        return new ObjectMapper()
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }
}
-------------------------------
CustomLocaleResolver.java
--------------------------
package com.gaudi.ai.configuration;

import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;

import com.gaudi.ai.constants.ApplicationConstants;

@Configuration
public class CustomLocaleResolver extends AcceptHeaderLocaleResolver implements WebMvcConfigurer {
	private static final Logger LOG = LogManager.getLogger(CustomLocaleResolver.class);
	List<Locale> localList = Arrays.asList(new Locale("en"), new Locale("ko"));

	@Override
	public Locale resolveLocale(HttpServletRequest request) {
		LOG.info("resolveLocale :{}", request);
		String headerLang = request.getHeader(ApplicationConstants.ACEEPTLANGUAGE);
		return headerLang == null || headerLang.isEmpty() ? Locale.getDefault()
				: Locale.lookup(Locale.LanguageRange.parse(headerLang), localList);
	}

	@Bean
	MessageSource messageSource() {

		ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
		messageSource.setBasenames(ApplicationConstants.ERRORMESSAGES,
				ApplicationConstants.RESPONSEMESSAGES);
		messageSource.setDefaultEncoding("UTF-8");
		LOG.info("messageSource :{}" ,messageSource);
		return messageSource;
	}
}
---------------------------------
Constant
------------
ApplicationConstant.java
-------------------------
package com.gaudi.ai.constants;

public class ApplicationConstants {

    public static final String COMPOSITE = "Composite";

    private ApplicationConstants() {
        throw new IllegalStateException("ApplicationConstants class");
    }

    public static final String BLENDING = "Blending";
    public static final String GAN = "GAN";
    public static final String IMAGE_PROCESSING = "image-processing";
    public static final String BAD_REQUEST = "BAD_REQUEST";
    public static final String SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE";
    public static final String NO_CONTENT = "NO_CONTENT";
    public static final String IMAGE_SOURCE_MASK = "/Image/source_mask/";
    public static final String FORWORD_SHLASH = "/";
    public static final String IMAGE_TARGET_MASK = "/Image/target_mask/";
    public static final String DEEPBLENDING = "DeepBlending";
    public static final String UNDERSCORE = "_";
    public static final String BL = "BL";
    public static final String IP = "IP";
    public static final String VERSION = "V1.0";
    public static final String ASC = "asc";
    public static final String BLANK = "";
    public static final String YES = "Y";
    public static final String ACTIVE = "A";
    public static final String NO = "N";
    public static final String V = "V";
    public static final String SOURCE = "source";
    public static final String SOURCE_MASK = "source_mask";
    public static final String TARGET = "target";
    public static final String TARGET_MASK = "target_mask";
    public static final String IMAGE_SLASH = "/Image/";
    public static final String GETFILE = "getFile";
    public static final String FOUND = "FOUND";
    public static final String VERSIONID = "versionID";
    public static final String TABNAME = "tabName";
    public static final String FILE = "file";
    public static final String NOT_FOUND = "NOTFOUND";
    public static final String CHANNEL = "channel";
    public static final String GANDATASET = "GanDataset";
    public static final String NOAUG = "noaug";
    public static final String DOC = "Doc";
    public static final String LOG = "Log";
    public static final String TRAINNING = "Train";
    public static final String ACEEPTLANGUAGE = "Accept-Language";
    public static final String ERRORMESSAGES = "classpath:/messages/api_ai_error_messages";
    public static final String RESPONSEMESSAGES = "classpath:/messages/api_ai_response_messages";
    public static final String CREATEDDATE = "createdDate";
    public static final String LABEL = "label";
    public static final String ALL = "All";
    public static final String IMAGE = "Image";
    public static final String RESULT = "result";
    public static final String FILTER = "Filter";
    public static final String IMAGES = "Images";
    public static final String DB = ".db";
    public static final String FORBIDDEN = "Forbidden";
    public static final String INTERNALSERVERERROR = "Internal Server Error";
    public static final String TRAIN_MODULE = "train";
    public static final String EXPORT = "Export";
    public static final String ERROR = "Error: ";
    public static final String DEFAULT = "0.0";
    public static final String V1_0 = "V1.0";
    public static final String TEST = "Test";
    public static final String TEST_MODULE = "inference";
    public static final String HYPHEN = "-";
    public static final String MODEL_DATA_JSON = "model_data.json";
    public static final String FOLDER_NAME = "folderName";
    public static final String JSON = "Json";
    public static final String RESULT_MASK = "result_mask";
    public static final String LOAD_IMAGE = "load_image";
    public static final String DEFECT_PATTERN = "defect_pattern";
    public static final String OK_IMAGE = "ok_image";
    public static final Character DOT = '.';
    public static final String BACKSLASH = "\\";
    public static final String D = "d";
    public static final String PLUSE = "+";
    public static final String DATA_CHANNELS = "DataChannels";
    public static final String CLASS_LIST = "ClassList";
    public static final String CHANNELNAME = "channelName";
    public static final String NULL = "null";   
    public static final String DEFAULT_MODELS="DefaultModels";
	public static final String ACCEPT_LANGUAGE = "Accept-Language";
}
-----------------------------------------------------------------
PythonServiceEndPointConstant.java
----------------------------------
package com.gaudi.ai.constants;

public class PythonServiceEndPointConstant {
	private PythonServiceEndPointConstant() {
		throw new IllegalStateException("PythonServiceEndPointConstant class");
	}

	public static final String ZIP_IT= "/compress";
	public static final String BLEND = "/blend";
	public static final String TRAIN = "/train";
	public static final String PAUSE="/pause";
	public static final String STOP= "/stop";
	public static final String STREAMLOGS="/streamLogs";
	public static final String TEST="/test";
	public static final String IMAGE_PROCESSING="/imageProcessing";
}

==================================================
BlendingController.java
-----------------------
package com.gaudi.ai.controller;

import java.util.Arrays;

import javax.validation.Valid;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.gaudi.ai.exception.AppError;
import com.gaudi.ai.request.BlendingDiscardImageRequest;
import com.gaudi.ai.request.BlendingGenerateRequest;
import com.gaudi.ai.request.BlendingMaskRequest;
import com.gaudi.ai.request.BlendingSourceRequest;
import com.gaudi.ai.request.BlendingTargetMaskRequest;
import com.gaudi.ai.request.BlendingTargetRequest;
import com.gaudi.ai.request.DeleteImageRequest;
import com.gaudi.ai.request.FileInfo;
import com.gaudi.ai.request.GaudiAINasRequest;
import com.gaudi.ai.request.GaudiAINasUpdateRequest;
import com.gaudi.ai.request.ResponseMessage;
import com.gaudi.ai.response.GaudiAIVersionData;
import com.gaudi.ai.response.GenerateTabResponse;
import com.gaudi.ai.response.HttpOperationResponseBean;
import com.gaudi.ai.response.MaskTabResponse;
import com.gaudi.ai.response.SourceTabResponse;
import com.gaudi.ai.response.TabResponseBean;
import com.gaudi.ai.response.TargetMaskTabResponse;
import com.gaudi.ai.response.TargetTabResponse;
import com.gaudi.ai.service.BlendingService;
import com.gaudi.ai.service.FilesStorageService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@RestController
@RequestMapping("/gaudi-ai-blending")
@SecurityRequirement(name = "gaudi-ai-api")
public class BlendingController {

	private static final Logger LOG = LogManager.getLogger(BlendingController.class);

	@Autowired
	private BlendingService blendingService;

	@Autowired
	FilesStorageService storageService;
	
	@Autowired
	private MessageSource messageSource;

	@Operation(summary = "Welcome")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get Server Details", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = String.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/welcome", headers = "Accept-Language", produces = { "application/json" })
	public String welcome() {
		LOG.info("Welcome");
		return "Welcome to gaudi-AI";
	}

	@Operation(summary = "Configure NAS")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Configure NAS", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/configureNAS", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> configureNAS(@Valid @RequestBody GaudiAINasRequest gaudiAINasRequest) {
		LOG.info("Configure NAS {}", gaudiAINasRequest);
		return blendingService.configureNAS(gaudiAINasRequest);
	}

	@Operation(summary = "Get List Of Configured NAS")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Configured NAS", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfConfiguredNAS", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfConfiguredNAS(
			@Parameter(required = true, description = "Created By") @RequestParam("createdBy") Long createdBy) {
		LOG.info("Get List Of Configured NAS");
		return blendingService.getListOfConfiguredNAS(createdBy);
	}

	@Operation(summary = "Update NAS Configuration")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Update NAS Configuration", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/updateNASConfiguration", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateNASConfiguration(
			@Valid @RequestBody GaudiAINasUpdateRequest gaudiAINasUpdateRequest) {
		LOG.info("Update NAS Configuration - {}", gaudiAINasUpdateRequest);
		return blendingService.updateNASConfiguration(gaudiAINasUpdateRequest);
	}

	@Operation(summary = "Delete NAS Configuration")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete NAS Configuration", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteNASConfiguration", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteNASConfiguration(
			@Parameter(required = true, description = "NAS ID") @RequestParam("nasID") Long nasID) {
		LOG.info("Delete NAS Configuration - {}", nasID);
		return blendingService.deleteNASConfiguration(nasID);
	}

	@Operation(summary = "Upload Image File")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Upload Image File", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMessage.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/upload", consumes = { "multipart/form-data" })
	public ResponseEntity<ResponseMessage> upload(MultipartHttpServletRequest request) {
		String message = "";

		try {
			storageService.saveImage(request);
			message = messageSource.getMessage("file.uploaded.successfully", null, LocaleContextHolder.getLocale());
			return ResponseEntity.status(HttpStatus.OK).body(new ResponseMessage(message));
		} catch (Exception e) {
			message = messageSource.getMessage("fail.to.upload.files", null, LocaleContextHolder.getLocale());

			return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseMessage(message));
		}
	}

	@Operation(summary = "Load Image File")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Load Image File", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = FileInfo.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping("/files")
	public ResponseEntity<?> getListFiles(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "Tab Name") @RequestParam("tabName") String tabName,
			@Parameter(required = true, description = "Channel Name") @RequestParam("channelName") String channelName) {
		LOG.info("Load Image File versionID {} tabName : {} channelName : {} ", versionID, tabName, channelName);
		return storageService.loadAll(versionID, tabName, channelName);
	}

	@Operation(summary = "Get Particular Image File")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get Particular Image File", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = Resource.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })

	@GetMapping("/files/{versionID:.+}/{tabName:.+}/{channelName:.+}/{filename:.+}")
	public ResponseEntity<Resource> getFile(@PathVariable Long versionID, @PathVariable String tabName,@PathVariable String  channelName,
			@PathVariable String filename) {
		Resource file = null;
		try {
			file = storageService.load(versionID, tabName,channelName, filename);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFilename() + "\"")
				.body(file);

	}

	@Operation(summary = "Get GAN Image File")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get GAN Image File", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = Resource.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })

	@GetMapping("/getGANFile/{versionID:.+}/{ganModuletabName:.+}/{tickName:.+}/{className:.+}/{channelName:.+}/{filename:.+}")
	public ResponseEntity<Resource> getGANFile(@PathVariable Long versionID, @PathVariable String ganModuletabName, 
			@PathVariable String tickName, @PathVariable String className , @PathVariable String channelName,
			@PathVariable String filename) {
		Resource file = null;
		try {
			file = storageService.loadGanResult( versionID , ganModuletabName, tickName, className, channelName,  filename);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFilename() + "\"")
				.body(file);

	}
	
	@Operation(summary = "Save Source Tab Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Save Source Tab Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = TabResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveSource", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveSource(@RequestBody BlendingSourceRequest blendingSourceRequest) {
		LOG.info("Save Source Tab Data {}", blendingSourceRequest);
		return blendingService.saveSource(blendingSourceRequest);
	}

	@Operation(summary = "Save Mask Tab Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Save Mask Tab Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = TabResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveMask", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveMask(@RequestBody BlendingMaskRequest blendingMaskRequest) {
		LOG.info("Save Mask Tab Data {}", blendingMaskRequest);
		return blendingService.saveMask(blendingMaskRequest);
	}

	@Operation(summary = "Save Target Tab Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Save Target Tab Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = TabResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveTarget", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveTarget(@RequestBody BlendingTargetRequest blendingTargetRequest) {
		LOG.info("Save Target Tab Data {}", blendingTargetRequest);
		return blendingService.saveTarget(blendingTargetRequest);
	}

	@Operation(summary = "Save Target Mask Tab Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Save Target Mask Tab Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = TabResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveTargetMask", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveTargetMask(@RequestBody BlendingTargetMaskRequest blendingTargetMaskRequest) {
		LOG.info("Save Target Mask Tab Data {}", blendingTargetMaskRequest);
		return blendingService.saveTargetMask(blendingTargetMaskRequest);
	}

	@Operation(summary = "Save Generate Json Tab Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Save Generate Json Tab Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveGenerateJson", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveGenerateJson(@Valid @RequestBody BlendingGenerateRequest blendingGenerateRequest) {
		LOG.info("Save Generate Json Tab Data {}", blendingGenerateRequest);
		return blendingService.saveGenerateJson(blendingGenerateRequest);
	}

	@Operation(summary = "Get Log And Process Status")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get Log And Process Status", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getLogProcessStatus", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getLogProcessStatus(
			@Parameter(required = true, description = "Smart ID") @RequestParam("smartID") String smartID) {
		//LOG.info("Get Log And Process Status smartID - {}", smartID);
		return blendingService.getLogProcessStatus(smartID);
	}

	@Operation(summary = "Terminate The Blending Process")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Terminate The Blending Process", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/terminateBlending", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> terminateBlending(
			@Parameter(required = true, description = "Smart ID") @RequestParam("smartID") String smartID) {
		LOG.info("Terminate The Blending Process SmartID - {}", smartID);
		return blendingService.terminateBlending(smartID);
	}

	@Operation(summary = "Get Tab Wise Data - Source")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get Tab Wise Data - Source", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = SourceTabResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getSourceData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getSourceData(
			@Parameter(required = true, description = "Source ID") @RequestParam("sourceID") Long sourceID) {
		LOG.info("Get Tab Wise Data - Source  SourceID - {} ", sourceID);
		return blendingService.getSourceData(sourceID);
	}

	@Operation(summary = "Get Tab Wise Data - Mask")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get Tab Wise Data - Mask", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = MaskTabResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getMaskData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getMaskData(
			@Parameter(required = true, description = "Mask ID") @RequestParam("maskID") Long maskID) {
		LOG.info("Get Tab Wise Data - MaskMaskID - {} ", maskID);
		return blendingService.getMaskData(maskID);
	}

	@Operation(summary = "Get Tab Wise Data - Target")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get Tab Wise Data - Target", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = TargetTabResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getTargetData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getTargetData(
			@Parameter(required = true, description = "Target ID") @RequestParam("targetID") Long targetID) {
		LOG.info("Get Tab Wise Data - Target targetID - {} ", targetID);
		return blendingService.getTargetData(targetID);
	}

	@Operation(summary = "Get Tab Wise Data - Target Mask")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get Tab Wise Data - Target Mask", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = TargetMaskTabResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getTargetMaskData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getTargetMaskData(
			@Parameter(required = true, description = "TargetMask ID") @RequestParam("targetMaskID") Long targetMaskID) {
		LOG.info("Get Tab Wise Data - Target Mask  targetMaskID - {} ", targetMaskID);
		return blendingService.getTargetMaskData(targetMaskID);
	}

	@Operation(summary = "Get Tab Wise Data - Generate")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get Tab Wise Data - Generate", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = GenerateTabResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getGenerateData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getGenerateData(
			@Parameter(required = true, description = "Generate ID") @RequestParam("generateID") Long generateID) {
		LOG.info("Get Tab Wise Data - Generate  generateID - {} ", generateID);
		return blendingService.getGenerateData(generateID);
	}

	@Operation(summary = "Get Particular Version Data With Active Tab Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get Particular Version Data With Active Tab Data", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = GaudiAIVersionData.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getParticularVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getParticularVersion(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID) {
		LOG.info("Get Particular Version Data With Active Tab Data VersionID {} .", versionID);
		return blendingService.getParticularVersion(versionID);
	}

	@Operation(summary = "Update Source Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Update SourceDate ", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/updateSourceData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateSourceData(@RequestBody BlendingSourceRequest gaudiAISourceUpdateRequest) {
		LOG.info("Update SourceData {} .", gaudiAISourceUpdateRequest);
		return blendingService.updateSourceData(gaudiAISourceUpdateRequest);
	}

	@Operation(summary = "Update Mask Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Update MaskDate Successfully!!..", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/updateMaskData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateMaskData(@RequestBody BlendingMaskRequest gaudiAIMaskUpdateRequest) {
		LOG.info("Update MaskData  {} .", gaudiAIMaskUpdateRequest);
		return blendingService.updateMaskData(gaudiAIMaskUpdateRequest);
	}

	@Operation(summary = "Update Target Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Update TargetDate Successfully!!..", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/updateTargetData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateTargetData(@RequestBody BlendingTargetRequest gaudiAITargetUpdateRequest) {
		LOG.info("Update TargetData  {} .", gaudiAITargetUpdateRequest);
		return blendingService.updateTargetData(gaudiAITargetUpdateRequest);
	}

	@Operation(summary = "Update TargetMask Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Update TargetMaskDate Successfully!!..", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/updateTargetMaskData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateTargetMaskData(
			@RequestBody BlendingTargetMaskRequest gaudiAITargetMaskUpdateRequest) {
		LOG.info("Update TargetMaskData  {} .", gaudiAITargetMaskUpdateRequest);
		return blendingService.updateTargetMaskData(gaudiAITargetMaskUpdateRequest);
	}

	@Operation(summary = "Update Generate Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Update GenerateDate Successfully!!..", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/updateGenerateData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateGenerateData(@Valid @RequestBody BlendingGenerateRequest blendingGenerateRequest) {
		LOG.info("Update GenerateData  -{}", blendingGenerateRequest);
		return blendingService.updateGenerateData(blendingGenerateRequest);
	}
	
	@Operation(summary = "Delete Blending Image")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete Blending Image", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteBlendingImage", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteBlendingImage(
			@Parameter(required = true, description = "Delete Blending Image Request") @RequestBody DeleteImageRequest deleteBlendingImageRequest) {
		LOG.info("Delete Blending Image - {}", deleteBlendingImageRequest);
		return blendingService.deleteBlendingImage(deleteBlendingImageRequest);
	}
	
	@Operation(summary = "Discard The Blending Image")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Discard The Blending Image", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/discardTheBlendingImage", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> discardTheBlendingImage(@RequestBody BlendingDiscardImageRequest blendingDiscardImageRequest) {
		LOG.info("Discard The Blending Image {} ", blendingDiscardImageRequest);
		return blendingService.discardTheBlendingImage(blendingDiscardImageRequest);
	}
	@Operation(summary = "Get List Of Channels")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Channels", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = Arrays.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfChannels", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfChannels(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "TabName") @RequestParam("tabName") String tabName){
		LOG.info("Get List Of  Channels - versionID {} ,tabName - {}", versionID,tabName);
		return blendingService.getListOfChannels(versionID,tabName);
	}
	
	@Operation(summary = "Check The Image On The Basis Of Count In Blending")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Discard The Image On The Basis Of Count In Blending", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/checkTheBlendingImageCountBasis", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> checkTheBlendingImageCountBasis(@RequestBody BlendingDiscardImageRequest blendingDiscardImageRequest) {
		LOG.info("Check The Image On The Basis Of Count In Blending - {} ", blendingDiscardImageRequest);
		return blendingService.checkTheBlendingImageCountBasis(blendingDiscardImageRequest);
	}
	@Operation(summary = "Delete Blending Images")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete Blending Image", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteBlendingImages", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteBlendingImages(
			@Parameter(required = true, description = "Delete Blending Image Request") @RequestBody DeleteImageRequest deleteBlendingImageRequest) {
		LOG.info("Delete Blending Image - {}", deleteBlendingImageRequest);
		return blendingService.deleteBlendingImages(deleteBlendingImageRequest);
	}
}

------------------------

GANController.java
-------------------

package com.gaudi.ai.controller;


import com.gaudi.ai.exception.AppError;
import com.gaudi.ai.model.GanDataset;
import com.gaudi.ai.request.DeselectionOfDatasetRequest;
import com.gaudi.ai.request.GanClassRequest;
import com.gaudi.ai.request.GanClassUpdateRequest;
import com.gaudi.ai.request.GanDatasetRequest;
import com.gaudi.ai.request.GanDiscardImageRequest;
import com.gaudi.ai.request.GanTestWizardRequest;
import com.gaudi.ai.request.GanTrainingWizardRequest;
import com.gaudi.ai.request.LabelTheImageRequest;
import com.gaudi.ai.request.UnLabelTheImageRequest;
import com.gaudi.ai.response.DefaultGanResultResponse;
import com.gaudi.ai.response.GanDatasetCreationResponse;
import com.gaudi.ai.response.GanDefaultModelClassAndChannel;
import com.gaudi.ai.response.GanTestWizardResponse;
import com.gaudi.ai.response.GanTrainingResponse;
import com.gaudi.ai.response.GaudiAIGANVersionData;
import com.gaudi.ai.response.HttpOperationResponseBean;
import com.gaudi.ai.response.ImageProperties;
import com.gaudi.ai.response.ListOfChannelResponse;
import com.gaudi.ai.response.ListOfClassResponse;
import com.gaudi.ai.response.ListOfGanChannel;
import com.gaudi.ai.response.ListOfGanClass;
import com.gaudi.ai.response.ListOfGanImageResponse;
import com.gaudi.ai.response.ListOfGanResultResponse;
import com.gaudi.ai.response.ListOfGanTrainingSettings;
import com.gaudi.ai.response.ParticularGanDatasetResponse;
import com.gaudi.ai.response.PythonSucessResponse;
import com.gaudi.ai.response.TabResponseBean;
import com.gaudi.ai.service.FilesStorageService;
import com.gaudi.ai.service.GANService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/gaudi-ai-gan")
@SecurityRequirement(name = "gaudi-ai-api")
public class GANController {

	private static final Logger LOG = LogManager.getLogger(GANController.class);

	@Autowired
	private GANService ganService;
	@Autowired
	private FilesStorageService fileStorageService;
	@Operation(summary = "Create Class For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Create Class For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/createGanClass", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> createGanClass(@Valid @RequestBody GanClassRequest ganClassRequest) {
		LOG.info("Create Class For GAN - {}", ganClassRequest);
		return ganService.createGanClass(ganClassRequest);
	}

	@Operation(summary = "Get List Of Class For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Class For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfClassResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANClass", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANClass(
			@Parameter(required = true, description = "dataset ID") @RequestParam("datasetID") Long datasetID) {
		LOG.info("Get Class For GAN - {}", datasetID);
		return ganService.getListOfGANClass(datasetID);
	}

	@Operation(summary = "Update Class For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Update Class For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/updateGANClass", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateGANClass(@RequestBody GanClassUpdateRequest ganClassUpdateRequest) {
		LOG.info("Update Class For GAN - {}", ganClassUpdateRequest);
		return ganService.updateGANClass(ganClassUpdateRequest);
	}

	@Operation(summary = "Delete Class For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete Class For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteGANClass", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteGANClass(
			@Parameter(required = true, description = "Class ID") @RequestParam("classID") Long classID) {
		LOG.info("Delete Class For GAN - {}", classID);
		return ganService.deleteGANClass(classID);
	}

	@Operation(summary = "Get List Of Channel For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Channel For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfChannelResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANChannel", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANChannel(
			@Parameter(required = true, description = "dataset ID") @RequestParam("datasetID") Long datasetID) {
		LOG.info("Get List Of Channel For GAN - {}", datasetID);
		return ganService.getListOfGANChannel(datasetID);
	}

	@Operation(summary = "Save train wizard Tab Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Save Train Reward Tab Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveTrainWizard", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveTrainWizard(@Valid @RequestBody GanTrainingWizardRequest ganTrainingWizardRequest) {
		LOG.info("Save Train Wizard Tab Data {}", ganTrainingWizardRequest);
		return ganService.saveGanTrainingWizard(ganTrainingWizardRequest);
	}
	
	@Operation(summary = "Update Gan Training Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Update Gan Training Successfully!!..", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = TabResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PutMapping(value = "/updateGanTrainingData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateGanTrainingData(@RequestBody  GanTrainingWizardRequest ganTrainingWizardRequest) {
		LOG.info("Update Gan Training  {} .", ganTrainingWizardRequest);
		return ganService.updateGanTrainingData(ganTrainingWizardRequest);
	}
	@Operation(summary = "Get List Of ClassName For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of ClassName For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANClassName", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANClassName(
			@Parameter(required = true, description = "dataset ID") @RequestParam("datasetID") Long datasetID) {
		LOG.info("Get ClassName For GAN - {}", datasetID);
		return ganService.getListOfLabeledClass(datasetID);
	}

	@Operation(summary = "Get List Of Channel Image")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Channel Image", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfGanImageResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfChannelImage", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfChannelImage(
			@Parameter(required = true, description = "Page Size") @RequestParam("pageSize") int pageSize,
			@Parameter(required = true, description = "Page Num") @RequestParam("pageNum") int pageNum,
			@Parameter(required = false, description = "Sort Field") @Nullable @RequestParam("sortField") String sortField,
			@Parameter(required = false, description = "Sort Dir") @Nullable @RequestParam("sortDir") String sortDir,
			@Parameter(required = true, description = "dataset id") @RequestParam("datasetID") Long datasetID,
			@Parameter(required = false, description = "channel id") @Nullable @RequestParam("channelID") Long channelID,
			@Parameter(required = true, description = "Filter like label, unlabel, All") @RequestParam("filter") String filter
			) {
		LOG.info("Get List Of Channel Image");
		return ganService.getListOfChannelImage(pageSize, pageNum, sortField, sortDir, datasetID, channelID, filter);
	}
	
	@Operation(summary = "Get GAN Particular Version Data With Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get GAN Particular Version Data With Data", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = GaudiAIGANVersionData.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getGANParticularVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getParticularVersion(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID) {
		LOG.info("Get GAN Particular Version Data With Data VersionID {} .", versionID);
		return ganService.getGANParticularVersion(versionID);
	}

	@Operation(summary = "Create Dataset For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Create Dataset For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = GanDatasetCreationResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/createGanDataset", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> createGanDataset(@Valid @RequestBody GanDatasetRequest ganDatasetRequest) {
		LOG.info("Create Dataset For GAN - {}", ganDatasetRequest);
		return ganService.createGanDataset(ganDatasetRequest);
	}

	@Operation(summary = "Get List Of Dataset For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Dataset For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = GanDataset.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANDataset", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANDataset(
			@Parameter(required = true, description = "user ID") @RequestParam("userID") Long userID) {
		LOG.info("Get List Of Dataset For GAN - {}", userID);
		return ganService.getListOfGANDataset(userID);
	}
	
	@Operation(summary = "Create Channel for Dataset")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Create Channel for Dataset", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/createChannel/{datasetID}", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> createChannel(
			@Parameter(required = true, description = "dataset ID") @PathVariable("datasetID") Long datasetID) {
		LOG.info("Create Channel for Dataset {}", datasetID);
		return ganService.createChannel(datasetID);
	}
	
	@Operation(summary = "Delete Channel for Dataset")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete Channel for Dataset", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteChannel", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteChannel(
			@Parameter(required = true, description = "channel ID") @RequestParam("channelID") Long channelID,
			@Parameter(required = true, description = "dataset ID") @RequestParam("datasetID") Long datasetID) {
		LOG.info("Delete Channel for Dataset - {}", datasetID);
		return ganService.deleteChannel(channelID, datasetID);
	}
	
	@Operation(summary = "Label The Image With Class")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Label The Image With Class", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/labelTheImage", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> labelTheImage(@RequestBody LabelTheImageRequest labelTheImageRequest) {
		LOG.info("Label The Image With Class  {} .", labelTheImageRequest);
		return ganService.labelTheImage(labelTheImageRequest);
	}
	
	@Operation(summary = "Get Particular Gan Data Set")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get Particular Gan Data Set", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = ParticularGanDatasetResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
    @GetMapping(value = "/getParticularGanDataSet", headers = "Accept-Language", produces = { "application/json" })	public ResponseEntity<?> getParticularGanDataSet(
			@Parameter(required = true, description = "Dataset ID") @RequestParam("datasetID") Long datasetID) {
		LOG.info("Get Particular Gan DataSet With Data DatasetID {} .", datasetID);
		return ganService.getParticularGanDataSet(datasetID);
	}
	
	@Operation(summary = "Selected Dataset For Version")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Selected Dataset For Version", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/selectedDatasetForVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> selectedDatasetForVersion(@RequestBody DeselectionOfDatasetRequest deselectionOfDatasetRequest) {
		LOG.info("Selected Dataset For deselectionOfDatasetRequest {} .", deselectionOfDatasetRequest);
		return ganService.selectedDatasetForVersion(deselectionOfDatasetRequest);
	}
	
	@Operation(summary = "Process Default Result For GAN")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Process Default Result For GAN", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = DefaultGanResultResponse.class)) }),
			@ApiResponse(responseCode = "204", description = "NO_CONTENT", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
    @GetMapping(value = "/processDefaultGANResult", headers = "Accept-Language", produces = { "application/json" })	
	public ResponseEntity<?> processDefaultGANResult(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "Gan Module TabName like train or inference") @RequestParam("ganModuletabName") String ganModuletabName) {
		LOG.info("Process Default Result For GAN versionID {} ganModuletabName {}.", versionID, ganModuletabName);
		return ganService.processDefaultGANResult(versionID, ganModuletabName);
	}
	
	@Operation(summary = "Process Result Page Wise For GAN")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "List Of Result Images", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfGanResultResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
    @GetMapping(value = "/processGANResult", headers = "Accept-Language", produces = { "application/json" })	
	public ListOfGanResultResponse processGANResult(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "Gan Module TabName like train or inference") @RequestParam("ganModuletabName") String ganModuletabName,
			@Parameter(required = true, description = "TickName means output folder name") @RequestParam("tickName") String tickName,
			@Parameter(required = true, description = "Select one className at a time.") @RequestParam("className") String className,
			@Parameter(required = true, description = "Channel Name") @RequestParam("channelName") String channelName,
			@Parameter(required = true, description = "First Image Number") @RequestParam("firstImageNumber") int firstImageNumber,
			@Parameter(required = true, description = "No Of Rows Image In List") @RequestParam("noOfRowsImageInList") int noOfRowsImageInList) {
		LOG.info("Process Result Page Wise For GAN versionID {} .", versionID);
		return ganService.processGANResult(versionID,ganModuletabName,tickName,className,channelName,firstImageNumber,noOfRowsImageInList);
	}
	
	
	@Operation(summary = "Pause Process Status")
    @ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Pause Process Status", content = {
            @Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
            @ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
            @ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
            @ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
    @GetMapping(value = "/pauseTrainWizard", headers = "Accept-Language", produces = { "application/json" })
    public ResponseEntity<?> pauseTrainWizard(
            @Parameter(required = true, description = "Smart ID") @RequestParam("smartID") String smartID) {
        LOG.info("Pause process smartID - {}", smartID);
        return ganService.pauseProcess(smartID);
    }
	@Operation(summary = "resume train wizard process")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "resume Train Reward Process", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/resumeTrainWizard", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> resumeTrainWizard(@Parameter(required = true, description = "Training Id") @RequestParam("trainingId") Long trainingId) {
		LOG.info("resume Train Wizard process {} trainingId ", trainingId);
		return ganService.resumeTrainWizard(trainingId);
	}
	
	@Operation(summary = "Discard the image")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Discard the image", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/discardTheimage", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> discardTheimage(@Valid @RequestBody GanDiscardImageRequest ganDiscardImageRequest) {
		LOG.info("Discard the image {} ", ganDiscardImageRequest);
		return ganService.discardTheimage(ganDiscardImageRequest);
	}

	@Operation(summary = "Get List Of Folder Of Gan Result")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Folder Of Gan Result", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfClassResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANResultFolder", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANResultFolder(
			@Parameter(required = true, description = "version ID") @RequestParam("versionID") Long versionID) {
		LOG.info("Get List Of Folder Of Gan Result - {}", versionID);
		return ganService.getListOfGANResultFolder(versionID);
	}
	
	
	@Operation(summary = "Deselection of Dataset from Version")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Deselection of Dataset from Version", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/deSelectionDatasetForVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deSelectionDatasetForVersion( @RequestBody DeselectionOfDatasetRequest deselectionOfDatasetRequest) {
		LOG.info("Deselection of Dataset For deselectionOfDatasetRequest {} .", deselectionOfDatasetRequest);
		return ganService.deSelectionDatasetForVersion(deselectionOfDatasetRequest);
	}
	
	@Operation(summary = "Get Training Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get GanTraining Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = GanTrainingResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getTrainingData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getTrainingData(
			@Parameter(required = true, description = "training ID") @RequestParam("trainingID") Long trainingID) {
		LOG.info("Get Training Data trainingID - {}", trainingID);
		return ganService.getGanTrainingData(trainingID);
	}
	@Operation(summary = "save test wizard Tab Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "save Test wizard Tab Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = PythonSucessResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveTestWizard", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveTestWizard(@Valid @RequestBody GanTestWizardRequest ganTestWizardRequest) {
		LOG.info("Save Test Wizard Tab Data {}", ganTestWizardRequest);
		return ganService.saveGanTestWizard(ganTestWizardRequest);
	}

	@Operation(summary = "Get Test Data ")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get GanTest Data - ", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = GanTestWizardResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getTestData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getTestData(@Parameter(required = true, description = "Test ID") @RequestParam("testID") Long testID) {
		LOG.info("Get  Test  Data -  testID - {} ", testID);
		return ganService.getGanTestWizard(testID);
	}
	
	@Operation(summary = "Get First Image dimension Of Dataset channel for Train Wizard")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get First Image dimension Of Dataset channel for Train Wizard", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ImageProperties.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/imageDimension", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> imageDimension(
			@Parameter(required = true, description = "dataset ID") @RequestParam("datasetID") Long datasetID) {
		LOG.info("Get First Image dimension Of Dataset channel for Train Wizard - DatasetID  {}", datasetID);
		return ganService.imageDimension(datasetID);
	}
	
	@Operation(summary = "Delete Output Folder Of Gan Result")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete Output Folder Of Gan Result", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteOutputFolder", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteOutputFolder(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "Output Folder Name") @RequestParam("outputFolderName") String outputFolderName) {
		LOG.info("Delete Output Folder Of Gan Result,versionID {} outputFolderName - {}",versionID, outputFolderName);
		return ganService.deleteOutputFolder(versionID, outputFolderName);
	}
	
	@Operation(summary = "Delete Image From Output Folder Of Gan Result")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete Image From Output Folder Of Gan Result", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteImageFromOutputFolder", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteImageFromOutputFolder(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "Gan Module TabName like train or inference") @RequestParam("ganModuletabName") String ganModuletabName,
			@Parameter(required = true, description = "Output Folder Name") @RequestParam("outputFolderName") String outputFolderName,
			@Parameter(required = true, description = "Class Name") @RequestParam("className") String className,
			@Parameter(required = true, description = "Image Name") @RequestParam("imageName") String imageName) {
		LOG.info("Delete Image From Output Folder Of Gan Result,versionID - {} ganModuletabName - {} outputFolderName - {} className - {} imageName - {}",versionID, ganModuletabName, outputFolderName, className, imageName);
		return ganService.deleteImageFromOutputFolder(versionID, ganModuletabName, outputFolderName,className,imageName);
	}
	
	@Operation(summary = "UnLabel The Image With Class")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "UnLabel The Image With Class", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/unLabelTheImage", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> unLabelTheImage(@RequestBody UnLabelTheImageRequest unLabelTheImageRequest) {
		LOG.info("Un Label The Image With Class  {} .", unLabelTheImageRequest);
		return ganService.unLabelTheImage(unLabelTheImageRequest);
	}
	@Operation(summary = "Training Wizard Save Setting  For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Training Wizard Save Setting For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/saveGanSetting", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> saveGanSetting(@Valid @RequestBody GanTrainingWizardRequest ganSaveSettingRequest) {
		LOG.info("Training Wizard Setting For GAN - {}.",ganSaveSettingRequest);
		return ganService.saveGanTrainingSetting(ganSaveSettingRequest);
	}
	@Operation(summary = "Get Gan Training Setting Data")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get GanTraining Setting Data", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = GanTrainingResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getTrainingSettingData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getTrainingSettingData(
			@Parameter(required = true, description = "Setting ID") @RequestParam("settingID") Long settingID,
	        @Parameter(required = false, description = "Dataset ID") @RequestParam(value = "datasetID",required = false) Long datasetID) {
		LOG.info("Get Gan Training Setting Data settingID - {},datasetID- {}",settingID,datasetID);
		return ganService.getGanTrainingSettingData(settingID,datasetID);
	}
	
	@Operation(summary = "Update Gan Training Setting Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Update Gan Training Setting Successfully!!..", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PutMapping(value = "/updateGanTrainingSettingData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> updateGanTrainingSettingData(@RequestBody  GanTrainingWizardRequest ganSaveSettingRequest) {
		LOG.info("Update Gan Training Setting  {} .", ganSaveSettingRequest);
		return ganService.updateTrainingSettingData(ganSaveSettingRequest);
	}
	
	@Operation(summary = "Get List Of Training Settings For GAN")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Training Settings For GAN", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfGanTrainingSettings.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANTrainingSetting", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANTrainingSetting(
			@Parameter(required = true, description = "user ID") @RequestParam("userID") Long userID) {
		LOG.info("Get List Of Gan Training Setting For GAN - {}", userID);
		return ganService.getListOfGANTrainingSetting(userID);
	}
	@Operation(summary = "Delete Gan Training Setting ")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete Gan Training Setting ", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteGanTrainingSetting", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteGanTrainingSetting(
			@Parameter(required = true, description = "Setting ID") @RequestParam("settingID") Long settingID){
		LOG.info("Delete Gan Training Setting settingID - {}",settingID);
		return ganService.deleteGanTrainingSetting(settingID);
	}
	
	@Operation(summary = "Delete The Dataset")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete The Dataset", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteDataset", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteDataset(
			@Parameter(required = true, description = "dataset ID") @RequestParam("datasetID") Long datasetID) {
		LOG.info("Delete The Dataset datasetID {}",datasetID);
		return ganService.deleteDataset(datasetID);
	}
	
	@Operation(summary = "Import Model")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Import Model", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })

	@PostMapping(value = "/importModel", consumes = { "multipart/form-data" })
	public ResponseEntity<?> importModel(MultipartHttpServletRequest request) {
		return fileStorageService.importModel(request);
	}
	
	@Operation(summary = "Get List Of GAN Class From Json")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of GAN Class From Json", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfGanClass.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANClassFromJson", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANClassFromJson(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "Folder Name") @RequestParam("folderName") String folderName) {
		LOG.info("Get List Of GAN Class From Json - Version ID - {} folderName {}", versionID, folderName);
		return ganService.getListOfGANClassFromJson(versionID, folderName);
	}
	
	@Operation(summary = "Get List Of GAN Channel From Json")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of GAN Channel From Json", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfGanChannel.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfGANChannelFromJson", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfGANChannelFromJson(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID,
			@Parameter(required = true, description = "Folder Name") @RequestParam("folderName") String folderName) {
		LOG.info("Get List Of GAN Channel From Json - Version ID - {} folderName {}", versionID, folderName);
		return ganService.getListOfGANChannelFromJson(versionID, folderName);
	}
	@Operation(summary = "Get List Of GAN Default Models")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of GAN Default Models", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = List.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfDefaultModels", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfDefaultModel() {
		LOG.info("Get List Of GAN Default Models");
		return ganService.getListOfDefaultModelName();
	}
	@Operation(summary = "Get List Of GAN Default Model ChannelList And Class")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of GAN Default Model ChannelList And Class", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = GanDefaultModelClassAndChannel.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfChannelAndClassFromGANDefaultModel", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfChannelAndClassFromGANDefaultModel(
			@Parameter(required = true, description = "Folder Name") @RequestParam("folderName") String folderName) {
		LOG.info("Get List Of GAN Default Model ChannelList And ClassList From Json - folderName {}", folderName);
		return ganService.getListOfGANDefaultModelChannelAndClassFromJson(folderName);
	}
}

ImageProcessingController.java
-------------------------------

package com.gaudi.ai.controller;

import javax.validation.Valid;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.gaudi.ai.exception.AppError;
import com.gaudi.ai.request.DeleteImageRequest;
import com.gaudi.ai.request.ImageProcessingGenerateRequest;
import com.gaudi.ai.request.ResponseMessage;
import com.gaudi.ai.response.GaudiAIIPVersionData;
import com.gaudi.ai.response.HttpOperationResponseBean;
import com.gaudi.ai.service.ImageProcessingService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@RestController
@RequestMapping("/gaudi-ai-ip")
@SecurityRequirement(name = "gaudi-ai-api")
public class ImageProcessingController {
private static final Logger LOG = LogManager.getLogger(ImageProcessingController.class);
	
	@Autowired
	private ImageProcessingService imageProcessingService;
	
	@Operation(summary = "IP Generate Tab")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "IP Generate Tab", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/imageProcessingGenerate", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> imageProcessingGenerate(@Valid @RequestBody ImageProcessingGenerateRequest imageProcessingGenerateRequest) {
		LOG.info("IP Generate Tab Request Data - {}", imageProcessingGenerateRequest);
		return imageProcessingService.imageProcessing(imageProcessingGenerateRequest);
	}
	@Operation(summary = "Upload DefectImage File")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Upload Image File", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMessage.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/uploadDefectImage", consumes = { "multipart/form-data" })
	public ResponseEntity<ResponseMessage> uploadDefectImage(MultipartHttpServletRequest request) {
		String message = "";

		try {
			imageProcessingService.saveDefectImage(request);
			message = "Uploaded the files successfully: ";
			return ResponseEntity.status(HttpStatus.OK).body(new ResponseMessage(message));
		} catch (Exception e) {
			message = "Fail to upload files!";

			return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseMessage(message));
		}
	}
	@Operation(summary = "Delete ImageProcessing Image(s)")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete ImageProcessing Image(s)", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteImageProcessingImage", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteImageProcessingImage(
			@Parameter(required = true, description = "Delete ImageProcessing Image Request") @RequestBody DeleteImageRequest deleteImageRequest) {
		LOG.info("Delete ImageProcessing Image - {}", deleteImageRequest);
		return imageProcessingService.deleteImageProcessingImage(deleteImageRequest);
	}
	@Operation(summary = "Get IP Particular Version Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Get IP Particular Version Data", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = GaudiAIIPVersionData.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getIPParticularVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getIpParticularVersion(
			@Parameter(required = true, description = "Version ID") @RequestParam("versionID") Long versionID) {
		LOG.info("Get IP Particular Version Data With Data VersionID - {}", versionID);
		return imageProcessingService.getIPParticularVersion(versionID);
	}
}

=====================================
ProjectDeshboardController.java
--------------------------------

package com.gaudi.ai.controller;

import com.gaudi.ai.exception.AppError;
import com.gaudi.ai.request.CloneVersionRequest;
import com.gaudi.ai.request.EditProject;
import com.gaudi.ai.request.ProjectCreationRequest;
import com.gaudi.ai.request.PythonExportRequest;
import com.gaudi.ai.request.VersionBodyRequest;
import com.gaudi.ai.request.AddVersionNote;
import com.gaudi.ai.response.HttpOperationResponseBean;
import com.gaudi.ai.response.ListOfProjectResponse;
import com.gaudi.ai.response.ListOfVersionResponse;
import com.gaudi.ai.response.ProjectCreationResponse;
import com.gaudi.ai.response.PythonCompressResponse;
import com.gaudi.ai.service.FilesStorageService;
import com.gaudi.ai.service.ProjectDashboardService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/gaudi-ai-project")
@SecurityRequirement(name = "gaudi-ai-api")
public class ProjectDashboardController {

	private static final Logger LOG = LogManager.getLogger(ProjectDashboardController.class);

	@Autowired
	private ProjectDashboardService projectDashboardService;
	
	@Autowired
	private FilesStorageService filesStorageService;

	@Operation(summary = "Create Project And Create First Version Of Project")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Create Project And Create First Version Of Project", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = ProjectCreationResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/createProject", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> createProject(@Valid @RequestBody ProjectCreationRequest projectCreationRequest) {
		LOG.info("Create Project And Create First Version Of Project - {}", projectCreationRequest);
		return projectDashboardService.createProject(projectCreationRequest);
	}

	@Operation(summary = "Get List Of Project")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Project", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfProjectResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfProject", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<ListOfProjectResponse> getListOfProject(
			@Parameter(required = true, description = "Page Size") @RequestParam("pageSize") int pageSize,
			@Parameter(required = true, description = "Page Num") @RequestParam("pageNum") int pageNum,
			@Parameter(required = true, description = "Sort Field") @RequestParam("sortField") String sortField,
			@Parameter(required = true, description = "Sort Dir") @RequestParam("sortDir") String sortDir,
			@Parameter(required = true, description = "User id") @RequestParam("userID") Long userID,
			@Parameter(required = true, description = "Project Module") @RequestParam("projectModule") String projectModule,
			@Parameter(required = false,	description = "Project Keyword") @RequestParam(value = "projectKeyword",required = false) String projectKeyword) {
		LOG.info("Get List Of Project userID {} projectModule {}",userID, projectModule);
		return projectDashboardService.getListOfProject(pageSize, pageNum, sortField, sortDir, userID, projectModule,projectKeyword);
	}

	@Operation(summary = "Get List Of Version")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Get List Of Version", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = ListOfVersionResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/getListOfVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> getListOfVersion(
			@Parameter(required = true, description = "Page Size") @RequestParam("pageSize") int pageSize,
			@Parameter(required = true, description = "Page Num") @RequestParam("pageNum") int pageNum,
			@Parameter(required = true, description = "Sort Field") @RequestParam("sortField") String sortField,
			@Parameter(required = true, description = "Sort Dir") @RequestParam("sortDir") String sortDir,
			@Parameter(required = true, description = "Project id") @RequestParam("projectID") Long projectID) {
		LOG.info("Get List Of Version pageSize {} pageNum {} sortField {} sortDir {}  projectID {} ", pageSize,pageNum , sortField,sortDir,projectID);
		return projectDashboardService.getListOfVersion(pageSize, pageNum, sortField, sortDir, projectID);
	}

	@Operation(summary = "Create New Version Of Project")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Create New Version Of Project", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/createNewVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> createNewVersion(
			@Parameter(required = true, description = "Project id") @RequestParam("projectID") Long projectID) {
		LOG.info("Create New Version Of Project - {} ", projectID);
		return projectDashboardService.createNewVersion(projectID);
	}

	@Operation(summary = "Clone an existing Version.")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Version Cloned Successfully", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/clone-version", headers = "Accept-Language", produces = { "application/json" })
	public HttpOperationResponseBean cloneVersion(
			@Parameter(required = true, description = "Project id") @RequestBody CloneVersionRequest request) throws Exception {
		LOG.info("Clone Version Request: {}", request);
		return projectDashboardService.cloneVersion(request);
	}

	@Operation(summary = "Export Data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Export The Project Version", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = PythonCompressResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: smartIds could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PostMapping(value = "/exportData", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> exportData(@RequestBody  PythonExportRequest pythonExportRequest) {
		LOG.info("Export The Project Versions {}",pythonExportRequest.getSmartIds());
		return filesStorageService.loadExport(pythonExportRequest);
	}

	@Operation(summary = "Delete The Project Version")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Export The Project Version", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteVersions", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteVersions(
			@Parameter(required = true, description = "version id") @RequestBody List<Long> versionIDS) {
		LOG.info("Delete The Project Versions {}",versionIDS);
		return projectDashboardService.deleteVersion(versionIDS);
	}

	@Operation(summary = "Delete The Project ")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete The Project", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteProject", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteProject(
			@Parameter(required = true, description = "Project id") @RequestParam Long projectID) {
		LOG.info("Delete The Project {} ",projectID);
		return projectDashboardService.deleteProject(projectID);
	}

	@Operation(summary = "Edit The Project ")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Edit The Project", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: projectID could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/editProject", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> editProjects(
			@Parameter(required = true, description = "EditProject") @RequestBody EditProject editProject) {
		LOG.info("Edit The Projects {}",editProject);
		return projectDashboardService.editProject(editProject);
	}
	
	@Operation(summary = "Create GAN New Version Of Project")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Create GAN New Version Of Project", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@GetMapping(value = "/createGanNewVersion", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> createGanNewVersion(
			@Parameter(required = true, description = "Project id") @RequestParam("projectID") Long projectID) {
		LOG.info("Create GAN New Version Of Project - {} ", projectID);
		return projectDashboardService.createGanNewVersion(projectID);
	}
	@Operation(summary = "Delete The Gan Project Version")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete The Gan Project Versions", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteGanVersions", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteGanVersions(
			@Parameter(required = true, description = "version ids") @RequestBody List<Long> versionIDs) {
		LOG.info("Delete The Project Versions {}",versionIDs);
		return projectDashboardService.deleteGanVersion(versionIDs);
	}
	@Operation(summary = "Delete The Gan Project ")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete The Gan Project", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteGanProject", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteGanProject(
			@Parameter(required = true, description = "Project id") @RequestParam Long projectID) {
		LOG.info("Delete The Gan Project  projectID - {} ",projectID);
		return projectDashboardService.deleteGanProject(projectID);
	}
	
	@Operation(summary = "Version Lock")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Version Lock", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@PatchMapping(value = "/versionLock", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> versionLock(
			@Parameter(required = true, description = "Version Lock") @RequestBody VersionBodyRequest versionBodyRequest) {
		LOG.info("Version Lock versionID - {} ", versionBodyRequest);
		return projectDashboardService.versionLock(versionBodyRequest);
	}
	@Operation(summary = "Delete The IP Project Version")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete The IP Project Version", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteIpVersions", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteIpVersions(
			@Parameter(required = true, description = "version ID") @RequestBody List<Long> versionIDS) {
		LOG.info("Delete The Project Versions IdList -{}",versionIDS);
		return projectDashboardService.deleteIpVersion(versionIDS);
	}

	@Operation(summary = "Delete The IP Project")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Delete The IP Project", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: Entity could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
	@DeleteMapping(value = "/deleteIpProject", headers = "Accept-Language", produces = { "application/json" })
	public ResponseEntity<?> deleteIpProject(
			@Parameter(required = true, description = "Project ID") @RequestParam Long projectID) {
		LOG.info("Delete The Project projectID - {} ",projectID);
		return projectDashboardService.deleteIpProject(projectID);
	}
	
	@Operation(summary = "Add Version Note")
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Add Version Note", content = {
			@Content(mediaType = "application/json", schema = @Schema(implementation = HttpOperationResponseBean.class)) }),
			@ApiResponse(responseCode = "400", description = "BAD REQUEST", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "401", description = "UNAUTHORIZED", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "404", description = "NOT_FOUND: versionID could not be found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }),
			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class)) }), })
		@PutMapping(value = "/addVersionNote", headers = "Accept-Language", produces = { "application/json" })
		public ResponseEntity<HttpOperationResponseBean> addVersionNote(
				@Parameter(required = true, description = "Add version Note") @RequestBody AddVersionNote addVersionNote) throws Exception
				{																							 
		LOG.info("Add the version Notes {}",addVersionNote);
		return projectDashboardService.addVersionNote(addVersionNote);
	}
}
=======================================================================================
AppError.java
---------------
package com.gaudi.ai.exception;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class AppError {
	private String timestamp;
	private Integer status;
	private String error;
	private String message;
	private String path;
	
}
------------------------
BADRequestException.java
--------------------------
package com.gaudi.ai.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.BAD_REQUEST)
public class BadRequestException extends RuntimeException{

	private static final long serialVersionUID = 1L;

	public BadRequestException(String exception) {
        super(exception);
    }

}
======================================================
CustomizedResponseEntityExceptionHandler.java
----------------------------------------------
package com.gaudi.ai.exception;

import com.gaudi.ai.constants.ApplicationConstants;
import com.gaudi.ai.request.ResponseMessage;
import org.springframework.context.NoSuchMessageException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.multipart.MaxUploadSizeExceededException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
@RestController
public class CustomizedResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler(BadRequestException.class)
    public final ResponseEntity<AppError> handleUserNotFoundException(BadRequestException badRequestException,
                                                                      WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 400, ApplicationConstants.BAD_REQUEST,
                badRequestException.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(ServiceUnavailableException.class)
    public final ResponseEntity<AppError> handleUserNotFoundException(
            ServiceUnavailableException serviceUnavailableException, WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 503, ApplicationConstants.SERVICE_UNAVAILABLE,
                serviceUnavailableException.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.SERVICE_UNAVAILABLE);
    }

    @Override
    @ResponseStatus
    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
                                                                  HttpHeaders headers, HttpStatus status, WebRequest request) {
        Map<String, String> errors = new HashMap<>();

        ex.getBindingResult().getAllErrors().forEach(error -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });

        try {
            return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
        }

    }

    @ExceptionHandler(ForbiddenException.class)
    public final ResponseEntity<AppError> handleForbiddenException(ForbiddenException forbiddenException,
                                                                   WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 403, ApplicationConstants.FORBIDDEN,
                forbiddenException.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.FORBIDDEN);
    }

    @ExceptionHandler(Exception.class)
    public final ResponseEntity<AppError> handleAllExceptions(Exception exception, WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 500, ApplicationConstants.INTERNALSERVERERROR,
                exception.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(MaxUploadSizeExceededException.class)
    public ResponseEntity<ResponseMessage> handleMaxSizeException(MaxUploadSizeExceededException exc) {
        return ResponseEntity
                .status(HttpStatus.EXPECTATION_FAILED)
                .body(new ResponseMessage("The request was rejected because its total size exceeds the configured maximum (12 MB)."));

    }

    @ExceptionHandler(NoSuchMessageException.class)
    public final ResponseEntity<AppError> NoSuchMessageException(NoSuchMessageException badRequestException,
                                                                 WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 400, ApplicationConstants.BAD_REQUEST,
                badRequestException.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public final ResponseEntity<AppError> MethodArgumentTypeMismatchException(MethodArgumentTypeMismatchException methodArgumentTypeMismatchException,
                                                                              WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 400, ApplicationConstants.BAD_REQUEST,
                methodArgumentTypeMismatchException.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(NumberFormatException.class)
    public final ResponseEntity<AppError> NumberFormatException(NumberFormatException numberFormatException,
                                                                WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 400, ApplicationConstants.BAD_REQUEST,
                numberFormatException.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.BAD_REQUEST);
    }


    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(VersionCloningException.class)
    public final AppError handleVersionCloningException(
            VersionCloningException ex,
            WebRequest request
    ) {
        return AppError.builder()
                .timestamp(new Date().toString())
                .message(ex.getMessage())
                .status(HttpStatus.BAD_REQUEST.value())
                .path(request.getDescription(false))
                .build();
    }
    
    @ExceptionHandler(NotFoundException.class)
    public final ResponseEntity<AppError> handleNotFoundException(NotFoundException notFoundException,
                                                                   WebRequest request) {
        AppError exceptionResponse = new AppError(LocalDateTime.now() + ApplicationConstants.BLANK, 404, ApplicationConstants.NOT_FOUND,
                notFoundException.getMessage(), request.getDescription(false));
        return new ResponseEntity<>(exceptionResponse, HttpStatus.NOT_FOUND);
    }
    
}
------------------------------------------------------------------------------------------------------

FileUploadException.java
-------------------------
package com.gaudi.ai.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.BAD_REQUEST)
public class FileUploadException extends RuntimeException{

	private static final long serialVersionUID = 1L;

	public FileUploadException(String exception) {
        super(exception);
    }
}
-----------------------------------------------------------------------------------------------------------
FoebiddenException.java
--------------------------
package com.gaudi.ai.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.FORBIDDEN)
public class ForbiddenException  extends RuntimeException{

	private static final long serialVersionUID = 1L;

	public ForbiddenException(String exception) {
        super(exception);
    }


}
---------------------------------------------------------------
NotFoundException.java
-------------------------
package com.gaudi.ai.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundException extends RuntimeException {
	private static final long serialVersionUID = 1L;

	public NotFoundException(String exception) {
		super(exception);

	}
}
-------------------------------------------------------
PythonValidationError.java
---------------------------
package com.gaudi.ai.exception;

import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PythonValidationError {
	List<ValidationError> details;
}
-----------------------------------------------
ServcieUnavailabelException.java
--------------------------------
package com.gaudi.ai.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)
public class ServiceUnavailableException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	public ServiceUnavailableException(String exception) {
        super(exception);
    }

}
---------------------------------------------
UnauthorizedException.java
--------------------------
package com.gaudi.ai.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.UNAUTHORIZED)
public class UnauthorizedException extends RuntimeException{

	private static final long serialVersionUID = 1L;

	public UnauthorizedException(String exception) {
        super(exception);
    }

}
--------------------------------------------------
ValidationError.java
--------------------
package com.gaudi.ai.exception;

import java.util.ArrayList;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ValidationError {
	private ArrayList<?> loc;
	private String msg;
	private String type;
}
---------------------------------------------------
VersionCloningException.java
-----------------------------
package com.gaudi.ai.exception;

public class VersionCloningException extends Exception {
    public VersionCloningException(final String message) {
        super(message);
    }
}
==================================================
Model:
-------
AdminUser.java
---------------
package com.gaudi.ai.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "admin_users", uniqueConstraints = @UniqueConstraint(columnNames = "email_id"))
public class AdminUsers {


	@JsonIgnore
	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "user_id")
	private Long userID;

	@NotEmpty(message = "EmailID may not be empty.")
	@Pattern(regexp = ".+@samsung.com", message = "Please provide a valid email address")
	@Column(name = "email_id")
	private String emailID;

	@NotEmpty(message = "Username may not be empty.")
	@Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters long.")
	@Column(name = "username")
	private String username;

	@JsonIgnore
	@Column(name = "authtoken")
	private String authtoken;

	@NotEmpty(message = "Password may not be empty.")
	@Column(name = "password")
	private String password;
	
	@JsonIgnore
	@Column(name = "user_path")
	private String userPath;
	
	@JsonIgnore
	@Column(name = "last_accessed_time")
	private Date lastAccessedTime;

	@JsonIgnore
	@Column(name = "last_accessed_timestamp")
	private String lastAccessedTimestamp;

	@JsonIgnore
	@Column(name = "is_active")
	private String isActive;

	@Column(name = "question_id")
	private Integer questionID;

	@NotEmpty(message = "Answer may not be empty.")
	@Column(name = "answer")
	private String answer;

	@JsonIgnore
	@Column(name = "created_date")
	private Date createdDate;

	@JsonIgnore
	@Column(name = "modified_date")
	private Date modifiedDate;

	@JsonIgnore
	@Column(name = "one_time_password")
	private String oneTimePassword;

	@JsonIgnore
	@Column(name = "otp_requested_time")
	private Date otpRequestedTime;


}
--------------------------------------
GanChannelImage.java
---------------------
package com.gaudi.ai.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;


import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Entity
@Table(name = "gan_channel_image")
public class GanChannelImage  implements Serializable {
	
	private static final long serialVersionUID = 6845312400662776609L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "channel_image_id")
	private Long channelImageID;

	
	@Column(name = "image_name")
	private String imageName;
	
	@Column(name = "labelled_yn")
	private String labelledYN;
	
	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;
	
	@Column(name = "is_active")
	private String isActive;
	
	@Column(name = "dataset_id")
	private Long datasetID;
	
	

	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "channel_id", referencedColumnName = "channel_id")
    private GanChannels ganChannels;
	
	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "class_id", referencedColumnName = "class_id")
    private GanClass ganClass;

}
---------------------------------------------------------------------
GanChannels.java
--------------------
package com.gaudi.ai.model;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Entity
@Table(name = "gan_channels")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class GanChannels  implements Serializable {

	private static final long serialVersionUID = 9201191655482881170L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "channel_id")
	private Long channelID;
	
	@Column(name = "dataset_id")
	private Long datasetID;

	@Column(name = "channel_name")
	private String channelName;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;
	
	@Column(name = "channel_path")
	private String channelPath;
	
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL ,mappedBy = "ganChannels")
	private Collection<GanChannelImage> ganChannelImage;
}
-------------------------------------------------------------------------------------
GanClass.java
--------------
package com.gaudi.ai.model;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Entity
@Table(name = "gan_class")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class GanClass implements Serializable{
	
	private static final long serialVersionUID = -6543058890667764529L;

		@Id
		@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
		@GenericGenerator(name = "native", strategy = "native")
		@Column(name = "class_id")
		private Long classID;
		
		@Column(name = "dataset_id")
		private Long datasetID;
	  
		@Column(name = "class_name")
		private String className;
	  
		@Column(name = "is_active")
		private String isActive;

		@Column(name = "created_by")
		private Long createdBy;
		
		@Column(name = "created_date")
		private Date createdDate;

		@Column(name = "modified_date")
		private Date modifiedDate;
		
		@JsonIgnore
		@OneToMany(fetch = FetchType.LAZY,mappedBy = "ganClass")
		private Collection<GanChannelImage> ganChannelImage;

}
---------------------------------------------------------------
GANDataset.java
----------------
package com.gaudi.ai.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Entity
@Table(name = "gan_dataset")
public class GanDataset implements Serializable {

	private static final long serialVersionUID = -6543058890667764529L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "dataset_id")
	private Long datasetID;

	@Column(name = "dataset_name")
	private String datasetName;

	@Column(name = "dataset_path")
	private String datasetPath;

	@Column(name = "no_of_channel")
	private Long noOfChannel;

	@Column(name = "is_cloned")
	private String isCloned;

	@Column(name = "parent_dataset_id")
	private Long parentDatasetID;

	@Column(name = "restriction")
	private String restriction;

	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_by")
	private Long createdBy;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;

}
----------------------------------
GanTestWizard.java
-------------------
package com.gaudi.ai.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "test_wizard")
public class GanTestWizard {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "test_id")
	private Long testId;

	@Column(name = "gaudi_version_id")
	private Long gaudiVersionId;
	
	@Column(name = "no_of_images_per_class")
	private Long noOfImagesPerClass;
	
	@Column(name = "test_class_names")
	private String testClassNames;
	
	@Column(name = "test_folder")
	private String testFolder;
	
	@Column(name = "test_seed")
	private Long testSeed;
	
	@Column(name = "test_auto_filter")
	private String testAutoFilter;

	@Column(name = "test_no_of_cluster")
	private Long testNoOfCluster;

	@Column(name = "created_by")
	private Long createdBy;

	@JsonIgnore
	@Column(name = "is_active")
	private String isActive;

	@JsonIgnore
	@Column(name = "created_date")
	private Date createdDate;
	
	@Column(name = "default_model")
	private String defaultModel;
}
---------------------------------------------
GanTrainingWizard.java
----------------------
package com.gaudi.ai.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gan_train_wizard")
public class GanTrainingWizard {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "training_id")
	private Long trainingId;

	@Column(name = "gaudi_version_id")
	private Long gaudiVersionId;

	@Column(name = "training_architecture")
	private String trainingArchitecture;

	@Column(name = "data_width")
	private Long dataWidth;

	@Column(name = "data_height")
	private Long dataHeight;

	@Column(name = "data_use_gray")
	private String dataUseGray;
	
	@Column(name = "train_class_name", columnDefinition = "JSON")
	private String trainClassName;

	@Column(name = "optimizer_type")
	private String optimizerType;

	@Column(name = "optimizer_g_learning_rate")
	private Float optimizerGLearningRate;

	@Column(name = "optimizer_d_learning_rate")
	private Float optimizerDLearningRate;

	@Column(name = "optimizer_beta_1")
	private Float optimizerBeta1;

	@Column(name = "optimizer_beta_2")
	private Float optimizerBeta2;

	@Column(name = "optimizer_vision_loss")
	private String optimizerVisionLoss;

	@Column(name = "training_iterations")
	private Long trainingIterations;

	@Column(name = "training_batch_size")
	private Long trainingBatchSize;

	@Column(name = "training_no_of_workers")
	private Long trainingNoOfWorkers;

	@Column(name = "training_minimum_iterations")
	private Long trainingMinimumIterations;

	@Column(name = "training_sample_interval")
	private Long trainingSampleInterval;

	@Column(name = "training_sample_number")
	private Long trainingSampleNumber;

	@Column(name = "training_gamma")
	private Float trainingGamma;

	@Column(name = "training_seed_point")
	private Long trainingSeedPoint;

	@Column(name = "augmentation")
	private String augmentation;

	@Column(name = "augmentation_P_value")
	private Float augmentationPvalue;

	@Column(name = "augmentation_target")
	private Float augmentationTarget;

	@Column(name = "augmentation_x_flip")
	private Float augmentationXFlip;

	@Column(name = "augmentation_rotate_90")
	private Float augmentationRotate90;

	@Column(name = "augmentation_integer_translation")
	private Float augmentationIntegerTranslation;

	@Column(name = "augmentation_scalling")
	private Float augmentationScalling;

	@Column(name = "augmentation_rotate")
	private Float augmentationRotate;

	@Column(name = "augmentation_anisotropy")
	private Float augmentationAnisotropy;

	@Column(name = "augmentation_x_frac")
	private Float augmentationXFrac;

	@Column(name = "augmentation_brightness")
	private Float augmentationBrightness;

	@Column(name = "augmentation_contrast")
	private Float augmentationContrast;

	@Column(name = "augmentation_luma_flip")
	private Float augmentationLumaFlip;

	@Column(name = "augmentation_hue")
	private Float augmentationHue;

	@Column(name = "augmentation_saturation")
	private Float augmentationSaturation;

	@Column(name = "post_process_auto_filter")
	private String postProcessAutoFilter;

	@Column(name = "post_process_no_of_cluster")
	private Long postProcessNoOfCluster;
	
	@Column(name = "post_process_generate_height")
	private Long postProcessGenerateHeight;
	
	@Column(name = "post_process_generate_width")
	private Long postProcessGenerateWidth;

	@Column(name = "created_by")
	private Long createdBy;

	@JsonIgnore
	@Column(name = "is_active")
	private String isActive;

	@JsonIgnore
	@Column(name = "created_date")
	private Date createdDate;

	@JsonIgnore
	@Column(name = "modified_date")
	private Date modifiedDate;
}
--------------------------------------------
GanTrainWizardSetting.java
--------------------------
package com.gaudi.ai.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gan_train_wizard_setting")
public class GanTrainWizardSetting {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "setting_id")
	private Long settingID;
	
	@Column(name = "setting_name")
	private String settingName;

	@Column(name = "setting_type")
	private String settingType;

	@Column(name = "data_width")
	private Long dataWidth;
	
	
	@Column(name = "data_height")
	private Long dataHeight;
	
	@Column(name = "data_use_gray")
	private String dataUseGray;

	@Column(name = "optimizer_type")
	private String optimizerType;

	@Column(name = "optimizer_g_learning_rate")
	private Float optimizerGLearningRate;

	@Column(name = "optimizer_d_learning_rate")
	private Float optimizerDLearningRate;

	@Column(name = "optimizer_beta_1")
	private Float optimizerBeta1;

	@Column(name = "optimizer_beta_2")
	private Float optimizerBeta2;

	@Column(name = "optimizer_vision_loss")
	private String optimizerVisionLoss;
	
	@Column(name = "training_architecture")
	private String trainingArchitecture;

	@Column(name = "training_iterations")
	private Long trainingIterations;

	@Column(name = "training_batch_size")
	private Long trainingBatchSize;

	@Column(name = "training_no_of_workers")
	private Long trainingNoOfWorkers;

	@Column(name = "training_minimum_iterations")
	private Long trainingMinimumIterations;

	@Column(name = "training_sample_interval")
	private Long trainingSampleInterval;

	@Column(name = "training_sample_number")
	private Long trainingSampleNumber;

	@Column(name = "training_gamma")
	private Float trainingGamma;

	@Column(name = "training_seed_point")
	private Long trainingSeedPoint;

	@Column(name = "augmentation")
	private String augmentation;

	@Column(name = "augmentation_P_value")
	private Float augmentationPValue;

	@Column(name = "augmentation_target")
	private Float augmentationTarget;

	@Column(name = "augmentation_x_flip")
	private Float augmentationXFlip;

	@Column(name = "augmentation_rotate_90")
	private Float augmentationRotate90;

	@Column(name = "augmentation_integer_translation")
	private Float augmentationIntegerTranslation;

	@Column(name = "augmentation_scalling")
	private Float augmentationScalling;

	@Column(name = "augmentation_rotate")
	private Float augmentationRotate;

	@Column(name = "augmentation_anisotropy")
	private Float augmentationAnisotropy;

	@Column(name = "augmentation_x_frac")
	private Float augmentationXFrac;

	@Column(name = "augmentation_brightness")
	private Float augmentationBrightness;

	@Column(name = "augmentation_contrast")
	private Float augmentationContrast;

	@Column(name = "augmentation_luma_flip")
	private Float augmentationLumaFlip;

	@Column(name = "augmentation_hue")
	private Float augmentationHue;

	@Column(name = "augmentation_saturation")
	private Float augmentationSaturation;

	@Column(name = "post_process_auto_filter")
	private String postProcessAutoFilter;

	@Column(name = "post_process_no_of_cluster")
	private Long postProcessNoOfCluster;
	
	@Column(name = "post_process_generate_height")
	private Long postProcessGenerateHeight;
	
	@Column(name = "post_process_generate_width")
	private Long postProcessGenerateWidth;

	@Column(name = "created_by")
	private Long createdBy;

	@JsonIgnore
	@Column(name = "is_active")
	private String isActive;

	@JsonIgnore
	@Column(name = "created_date")
	private Date createdDate;

	@JsonIgnore
	@Column(name = "modified_date")
	private Date modifiedDate;
}
-------------------------------------------------
GaudiAIBlendingGenerate.java
--------------------------------
package com.gaudi.ai.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_blending_generate")
public class GaudiAIBlendingGenerate {

	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "blending_generate_id")
	private Long blendingGenerateID;
	
	@Column(name = "gaudi_version_id")
	private Long gaudiVersionID;

	@Column(name = "save_defect_mask")
	private String saveDefectMask;
	
	@Column(name = "defect_x_scale", columnDefinition = "JSON")
	private String defectXScale;

	@Column(name = "defect_y_scale", columnDefinition = "JSON")
	private String defectYScale;
	
	@Column(name = "image_count")
	private Long imageCount;
	
	@Column(name = "algorithm")
	private String algorithm;

	@Column(name = "iteration")
	private Long iteration;

	@Column(name = "grad_weight")
	private float gradWeight;
	
	@Column(name = "style_weight")
	private float styleWeight;
	
	@Column(name = "seed")
	private Long seed;

	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;

	@Column(name = "created_by")
	private Long createdBy;
	
	@Column(name = "rotation")
	private String rotation;

	@Column(name = "degree_of_rotation_min")
	private Long degreeOfRotationMin;

	@Column(name = "degree_of_rotation_max")
	private Long degreeOfRotationMax;
	
	@Column(name = "defect_random_scale")
	private String defectRandomScale;
}
====================================================
GaudiAIBlendingMask.java
-------------------------
package com.gaudi.ai.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_blending_mask")
public class GaudiAIBlendingMask {

	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "blending_mask_id")
	private Long blendingMaskID;
	
	@Column(name = "gaudi_version_id")
	private Long gaudiVersionID;

	@Column(name = "mask_type")
	private String maskType;
	
	@Column(name = "image_upload_type")
	private String imageUploadType;
	
	@Column(name = "external_nas_path")
	private String externalNASPath;
	
	@Column(name = "nas_id")
	private Long nasID;
	
	@Column(name = "internal_mask_path")
	private String internalMaskPath;

	@Column(name = "selected_mask_image_name", columnDefinition = "JSON")//JSONObject
	private String selectedMaskImageName;
	
	@Column(name = "selected_mask_image_count")
	private Long selectedMaskImageCount;

	@Column(name = "mask_model_name")
	private String maskModelName;
	
	@Column(name = "mask_json_name")
	private String maskJsonName;

	@Column(name = "original_annotation_mask_image", columnDefinition = "JSON")//JSONObject
	private String originalAnnotationMaskImage;

	@Column(name = "annotated_mask_image", columnDefinition = "JSON")//JSONObject
	private String annotatedMaskImage;

	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;

	@Column(name = "created_by")
	private Long createdBy;
}
-------------------------------------------
GaudiAIBlendingSource.java
---------------------------
package com.gaudi.ai.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Builder;
import org.hibernate.annotations.GenericGenerator;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_blending_source")
public class GaudiAIBlendingSource {
	
	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "blending_source_id")
	private Long blendingSourceID;
	
	@Column(name = "gaudi_version_id")
	private Long gaudiVersionID;

	@Column(name = "image_upload_type")
	private String imageUploadType;
	
	@Column(name = "external_nas_path")
	private String externalNASPath;
	
	@Column(name = "nas_id")
	private Long nasID;

	@Column(name = "internal_source_path")
	private String internalSourcePath;

	@Column(name = "selected_source_image_name", columnDefinition = "JSON")
	private String selectedSourceImageName;
	
	
	@Column(name = "selected_source_image_count")
	private Long selectedSourceImageCount;

	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;

	@Column(name = "created_by")
	private Long createdBy;
	
}
========================================================
GaudiAIBlendingTarget.java
---------------------------
package com.gaudi.ai.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_blending_target")
public class GaudiAIBlendingTarget {
	
	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "blending_target_id")
	private Long blendingTargetID;
	
	
	@Column(name = "gaudi_version_id")
	private Long gaudiVersionID;

	@Column(name = "image_upload_type")
	private String imageUploadType;

	@Column(name = "nas_id")
	private Long nasID;

	@Column(name = "external_nas_path")
	private String externalNASPath;
	
	@Column(name = "internal_target_path")
	private String internalTargetPath;

	@Column(name = "selected_target_image_name", columnDefinition = "JSON")//JSONObject
	private String selectedTargetImageName;
	
	
	@Column(name = "selected_target_image_count")
	private Long selectedTargetImageCount;

	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;

	@Column(name = "created_by")
	private Long createdBy;
}
----------------------------------------
GaudiAIBlendingTargetMask.java
------------------------------
package com.gaudi.ai.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_blending_target_mask")
public class GaudiAIBlendingTargetMask {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "blending_target_mask_id")
	private Long blendingTargetMaskID;

	@Column(name = "gaudi_version_id")
	private Long gaudiVersionID;

	@Column(name = "target_mask_type")
	private String targetMaskType;
	
	@Column(name = "image_upload_type")
	private String imageUploadType;

	@Column(name = "external_nas_path")
	private String externalNASPath;

	@Column(name = "nas_id")
	private Long nasID;

	@Column(name = "internal_target_mask_path")
	private String internalTargetMaskPath;

	@Column(name = "selected_target_mask_image_name", columnDefinition = "JSON") // JSONObject
	private String selectedTargetMaskImageName;

	@Column(name = "selected_target_mask_image_count")
	private Long selectedTargetMaskImageCount;

	@Column(name = "target_mask_model_name")
	private String targetMaskModelName;

	@Column(name = "target_mask_json_name")
	private String targetMaskJsonName;

	@Column(name = "original_annotation_target_mask_image", columnDefinition = "JSON") // JSONObject
	private String originalAnnotationTargetMaskImage;

	@Column(name = "annotated_target_mask_image", columnDefinition = "JSON") // JSONObject
	private String annotatedTargetMaskImage;

	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;

	@Column(name = "created_by")
	private Long createdBy;
}

--------------------------------------
GaudiAINas.java
-----------------
package com.gaudi.ai.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_nas")
public class GaudiAINas {
	
		@Id
	    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
	    @GenericGenerator(name = "native",strategy = "native")
		@Column(name = "nas_id")
		private Long nasID;
	  
		@NotEmpty(message = "Nas name may not be empty.")
		@Size(min = 3, max = 50, message = "Nas name must be between 3 and 50 characters long.")
		@Column(name = "nas_name")
		private String nasName;
	  
		@NotEmpty(message = "Nas Username may not be empty.")
		@Size(min = 3, max = 50, message = "Nas Username must be between 3 and 50 characters long.")
		@Column(name = "nas_username")
		private String nasUsername;
	  
		@NotEmpty(message = "Nas Password may not be empty.")
		@Column(name = "nas_password")
		private String nasPassword;
		
		@NotEmpty(message = "PrefixPath may not be empty.")
		@Column(name = "prefix_path")
		private String prefixPath;
	  
		@Column(name = "is_active")
		private String isActive;

		@Column(name = "created_date")
		private Date createdDate;

		@Column(name = "modified_date")
		private Date modifiedDate;

		@Column(name = "created_by")
		private Long createdBy;

}
--------------------------------------------------------
GaudiAIProjects.java
----------------------

package com.gaudi.ai.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_projects")
public class GaudiAIProjects {
	
	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "project_id")
	private Long projectID;
	
	@NotEmpty(message = "Project Name may not be empty.")
	@Size(min = 3, max = 100, message = "Project Name must be between 3 and 100 characters long.")
	@Column(name = "project_name")
	private String projectName;
	
	@Column(name = "project_desc")
	private String projectDesc;
	
	@Column(name = "project_module")
	private String projectModule;
	
	@Column(name = "project_type")
	private String projectType;

	@Column(name = "project_path")
	private String projectPath;
	
	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "modified_date")
	private Date modifiedDate;

	@Column(name = "created_by")
	private Long createdBy;
	
	@Column(name = "no_of_channel")
	private Long noOfChannel;
}

===========================================
GaudiAIStatusMaster.java
-------------------------
package com.gaudi.ai.model;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_status_master")
public class GaudiAIStatusMaster {

	@JsonIgnore
	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "status_id")
	private Long statusID;
	
	@Column(name = "status_name")
	private String statusName;
	

}
---------------------------------------------------------------------
GaudiAIVersion.java
--------------------
package com.gaudi.ai.model;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import lombok.Builder;
import org.hibernate.annotations.GenericGenerator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "gaudi_ai_version")
public class GaudiAIVersion {
	
	@Id
    @GeneratedValue(strategy= GenerationType.AUTO,generator="native")
    @GenericGenerator(name = "native",strategy = "native")
	@Column(name = "version_id")
	private Long versionID;

	@Column(name = "project_id")
	private Long projectID;

	@Column(name = "version_name")
	private String versionName;

	@Column(name = "notes")
	private String notes;

	@Column(name = "active_step", columnDefinition = "JSON")//JSONObject)
	private String activeStep;

	@Column(name = "process_status")
	private String processStatus;
	
	@Column(name = "error_message")
	private String errorMessage;

	@Column(name = "version_path")
	private String versionPath;

	@Column(name = "is_clone")
	private String isClone;

	@Column(name = "clone_version_id")
	private Long cloneVersionID;

	@Column(name = "is_active")
	private String isActive;

	@Column(name = "created_date")
	private Date createdDate;

	@JsonIgnore
	@Column(name = "modified_date")
	private Date modifiedDate;

	@Column(name = "created_by")
	private Long createdBy;

	@Column(name = "lock_unlock")
	private String lockUnlock;

	@Column(name = "smart_id")
	private String smartID;
	
	@Column(name = "dataset_id")
	private Long datasetID;
	
	@Column(name = "process_gan_test_status")
	private Long processGanTestStatus;
	
	@Column(name = "error_gan_test_message")
	private String errorGanTestMessage;
}















